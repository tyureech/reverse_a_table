import pytest
from httpx import AsyncClient


@pytest.mark.parametrize(
    "user_id, restaurant_id, date, time_from, time_to, persons, status_code, detail",
    [
        (1, 1, "2012-12-12", "12:00:00", "14:00:00", 5, 201, None),
        (2, 1, "2012-12-12", "12:00:00", "14:00:00", 5, 201, None),
        (3, 1, "2012-12-12", "12:00:00", "14:00:00", 5, 201, None),
        (4, 1, "2012-12-12", "12:00:00", "14:00:00", 5, 201, None),
        (5, 1, "2012-12-12", "12:00:00", "14:00:00", 5, 409, "Не осталось свободных столиков"),
        (5, 1, "2012-12-12", "11:00:00", "12:00:00", 5, 201, None),
        (7, 1, "2012-12-12", "14:00:00", "15:00:00", 5, 201, None),
        (8, 1, "2012-12-12", "12:00:00", "13:00:00", 5, 409, "Не осталось свободных столиков"),
        (9, 1, "2012-12-12", "13:00:00", "14:00:00", 5, 409, "Не осталось свободных столиков"),
        (10, 1, "2012-12-12", "11:00:00", "12:20:00", 5, 409, "Не осталось свободных столиков"),
        (6, 1, "2012-12-12", "12:30:00", "13:40:00", 5, 409, "Не осталось свободных столиков"),
        (6, 1, "2012-12-12", "12:50:00", "14:30:00", 5, 409, "Не осталось свободных столиков"),
        (6, 1, "2012-12-12", "10:30:00", "15:00:00", 5, 409, "Не осталось свободных столиков"),
        (0, 1, "2012-12-12", "10:30:00", "15:00:00", 5, 404, "Пользователь не найден"),
        (1, 0, "2012-12-12", "10:30:00", "15:00:00", 5, 404, "Ресторан не найден"),
        (6, 1, "2012-12-12", "10:30:00", "11:00:00", 5, 409, "Минимальный интервал бронирования 1 час"),
        (1, 1, "2019-12-19", "22:00:00", "23:00:00", 5, 201, None),
        (1, 1, "2019-12-19", "09:00:00", "10:00:00", 5, 201, None),
        (2, 1, "2019-12-19", "08:00:00", "10:00:00", 5, 409, "Ресторан работает c 09:00 до 23:00"),
        (2, 1, "2019-12-19", "22:00:00", "23:45:00", 5, 409, "Ресторан работает c 09:00 до 23:00"),
        (2, 1, "2019-12-19", "22:00:00", "00:00:00", 5, 409, "Ресторан работает c 09:00 до 23:00"),
        (2, 1, "2019-12-19", "23:14:00", "06:00:00", 5, 409, "Ресторан работает c 09:00 до 23:00"),
        (2, 1, "2019-12-19", "22:00:00", "10:00:00", 5, 409, "Некорректный интервал"),
        (2, 1, "2019-12-19", "22:00:00", "22:00:00", 5, 409, "Некорректный интервал"),
    ],
)
async def test_add_bookings(
    user_id,
    restaurant_id,
    date,
    time_from,
    time_to,
    persons,
    status_code,
    detail,
    ac: AsyncClient,
):
    booking = await ac.post(
        "/bookings/add/",
        json={
            "user_id": user_id,
            "restaurant_id": restaurant_id,
            "date": date,
            "time_from": time_from,
            "time_to": time_to,
            "persons": persons,
        },
    )
    assert booking.status_code == status_code
    if status_code != 201:
        assert booking.json().get('detail') == detail
